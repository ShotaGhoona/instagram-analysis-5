#!/usr/bin/env python3
"""
Views Metric Verification Script

Test the new unified 'views' metric that replaced video_views in April 2025
for VIDEO posts (Reels) from „É§„Éû„Çµ„É™„Éé„Éô account.
"""

import sys
import os
import json
import requests
from datetime import datetime

# Add parent directory to path to import utils
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from utils.api_client import InstagramAPIClient

def test_views_metric():
    """Test the new unified views metric on VIDEO posts"""
    
    print("üöÄ Views Metric (Êñ∞Áµ±‰∏ÄÊåáÊ®ô) Ê§úË®º„ÇíÈñãÂßã„Åó„Åæ„Åô")
    print(f"üìÖ ÂÆüË°åÊó•ÊôÇ: {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}")
    print("üîÑ 2025Âπ¥4ÊúàÂªÉÊ≠¢„Åï„Çå„Åüvideo_views„ÅÆ‰ª£Êõø„Å®„Åó„Å¶views„É°„Éà„É™„ÇØ„Çπ„Çí„ÉÜ„Çπ„Éà")
    print()
    
    # Load Page Access Tokens from 01-me results
    input_file = os.path.join(os.path.dirname(__file__), '..', '01-me', '01-output-data.json')
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            me_data = json.load(f)
    except FileNotFoundError:
        print("‚ùå „Ç®„É©„Éº: ../01-me/01-output-data.json „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        print("   üîß ÂØæÁ≠ñ: ÂÖà„Å´ 01-me/01-basic-user-info.py „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        return False
    
    # Extract accounts data
    accounts_data = None
    for test in me_data.get('tests', []):
        if test.get('test_name') == 'user_accounts':
            accounts_data = test.get('data', {}).get('data', [])
            break
    
    if not accounts_data:
        print("‚ùå „Ç®„É©„Éº: „Ç¢„Ç´„Ç¶„É≥„Éà„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return False
    
    # Find „É§„Éû„Çµ„É™„Éé„Éô account specifically
    yamasa_account = None
    for account in accounts_data:
        if account.get('name') == '„É§„Éû„Çµ„É™„Éé„Éô':
            yamasa_account = account
            break
    
    if not yamasa_account:
        print("‚ùå „Ç®„É©„Éº: „É§„Éû„Çµ„É™„Éé„Éô„Ç¢„Ç´„Ç¶„É≥„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        return False
    
    # Use long-lived token from 02-refresh_access_token results
    long_lived_token_file = os.path.join(os.path.dirname(__file__), '..', '02-refresh_access_token', '01-output-data.json')
    try:
        with open(long_lived_token_file, 'r', encoding='utf-8') as f:
            token_data = json.load(f)
        
        # Find „É§„Éû„Çµ„É™„Éé„Éô token
        yamasa_token = None
        for conversion in token_data.get('token_conversions', []):
            if conversion.get('page_name') == '„É§„Éû„Çµ„É™„Éé„Éô':
                yamasa_token = conversion.get('page_long_lived_token', {}).get('token')
                break
        
        if yamasa_token:
            print(f"üîë Èï∑Êúü„Éà„Éº„ÇØ„É≥„Çí‰ΩøÁî®: {yamasa_token[:20]}...")
            yamasa_account['access_token'] = yamasa_token
        else:
            print(f"‚ö†Ô∏è Èï∑Êúü„Éà„Éº„ÇØ„É≥„ÅåË¶ã„Å§„Åã„Çâ„Åö„ÄÅÊó¢Â≠ò„Éà„Éº„ÇØ„É≥„Çí‰ΩøÁî®")
            
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Èï∑Êúü„Éà„Éº„ÇØ„É≥„Éï„Ç°„Ç§„É´„Å™„Åó„ÄÅÊó¢Â≠ò„Éà„Éº„ÇØ„É≥„Çí‰ΩøÁî®")
    
    print(f"üéØ Ê§úË®ºÂØæË±°: „É§„Éû„Çµ„É™„Éé„Éô - Êñ∞„Åó„ÅÑviews „É°„Éà„É™„ÇØ„ÇπÊ§úË®º")
    print("   üìù Ê≥®: ÂâçÂõûÁô∫Ë¶ã„Åó„Åü17‰ª∂„ÅÆVIDEOÊäïÁ®ø„Åßviews „É°„Éà„É™„ÇØ„Çπ„ÇíÊ§úË®º„Åó„Åæ„Åô")
    print()
    
    # Results structure
    results = {
        "endpoint": "/{ig-media-id}/insights?metric=views (New Unified Metric)",
        "timestamp": datetime.now().isoformat(),
        "Ê§úË®ºÊ¶ÇË¶Å": "2025Âπ¥4ÊúàÂ∞éÂÖ•„ÅÆÁµ±‰∏Äviews„É°„Éà„É™„ÇØ„ÇπÊ§úË®º",
        "account_info": {
            "page_name": yamasa_account.get('name'),
            "page_id": yamasa_account.get('id'),
            "ig_account_id": yamasa_account.get('instagram_business_account', {}).get('id', '')
        },
        "views_test_results": []
    }
    
    client = InstagramAPIClient()
    
    page_token = yamasa_account.get('access_token', '')
    ig_account_id = results["account_info"]["ig_account_id"]
    
    print(f"üîç „É§„Éû„Çµ„É™„Éé„Éô„Ç¢„Ç´„Ç¶„É≥„ÉàË©≥Á¥∞:")
    print(f"   üìÑ Page ID: {results['account_info']['page_id']}")
    print(f"   üì∏ IG Account ID: {ig_account_id}")
    print()
    
    if not ig_account_id or not page_token:
        print(f"‚ùå „Ç®„É©„Éº: Instagram Account ID„Åæ„Åü„ÅØToken„Åå‰∏çË∂≥")
        return False
    
    # Get VIDEO posts (we know from previous test there are 17 in first 25 posts)
    print(f"üîç „Çπ„ÉÜ„ÉÉ„Éó1: VIDEOÊäïÁ®ø„ÇíÂèñÂæó‰∏≠...")
    
    try:
        media_params = {
            'fields': 'id,media_type,timestamp,caption',
            'limit': 25,  # We know first page has 17 VIDEOs
            'access_token': page_token
        }
        
        media_response = client.graph_api_request(f'/{ig_account_id}/media', params=media_params)
        
        if not media_response:
            print(f"   ‚ùå ÊäïÁ®ø„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó: „É¨„Çπ„Éù„É≥„Çπ„ÅåNone")
            return False
        
        if 'data' not in media_response:
            print(f"   ‚ùå ÊäïÁ®ø„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó: data„Ç≠„Éº„Å™„Åó")
            print(f"   üîç „É¨„Çπ„Éù„É≥„ÇπÂÜÖÂÆπ: {media_response}")
            return False
        
        all_media = media_response['data']
        video_media = [media for media in all_media if media.get('media_type') == 'VIDEO']
        
        print(f"   ‚úÖ ÊäïÁ®ø„Éá„Éº„ÇøÂèñÂæóÂÆå‰∫Ü")
        print(f"      üìä Á∑èÊäïÁ®øÊï∞: {len(all_media)}")
        print(f"      üé¨ VIDEOÊäïÁ®øÊï∞: {len(video_media)}")
        print()
        
        if len(video_media) == 0:
            print(f"‚ö†Ô∏è VIDEOÊäïÁ®ø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            return False
        
        print(f"üß™ „Çπ„ÉÜ„ÉÉ„Éó2: views„É°„Éà„É™„ÇØ„ÇπÊ§úË®ºÈñãÂßã...")
        print(f"   üìù Ê§úË®ºÂØæË±°: ÊúÄÂàù„ÅÆ5‰ª∂„ÅÆVIDEOÊäïÁ®ø")
        print()
        
        # Test views metric on first 5 videos
        test_count = min(5, len(video_media))
        views_results = []
        
        for idx, video in enumerate(video_media[:test_count]):
            video_id = video.get('id')
            timestamp = video.get('timestamp')
            caption = video.get('caption', '')[:50] + '...' if video.get('caption') else '„Ç≠„É£„Éó„Ç∑„Éß„É≥„Å™„Åó'
            
            print(f"   üé¨ VIDEOÊäïÁ®ø{idx+1}/5: {video_id[:15]}...")
            print(f"      üìÖ ÊäïÁ®øÊó•: {timestamp}")
            print(f"      üí¨ „Ç≠„É£„Éó„Ç∑„Éß„É≥: {caption}")
            
            video_result = {
                "video_id": video_id,
                "timestamp": timestamp,
                "caption": caption,
                "metrics": {}
            }
            
            # Test 1: New views metric
            print(f"      üìä Êñ∞„É°„Éà„É™„ÇØ„Çπ: viewsÂèñÂæó...")
            try:
                views_params = {
                    'metric': 'views',
                    'access_token': page_token
                }
                
                views_response = client.graph_api_request(f'/{video_id}/insights', params=views_params)
                
                if views_response and 'data' in views_response:
                    views_data = views_response['data']
                    if views_data and len(views_data) > 0:
                        views_value = views_data[0].get('values', [{}])[0].get('value', 0)
                        video_result["metrics"]["views"] = {
                            "success": True,
                            "value": views_value,
                            "raw_data": views_data[0]
                        }
                        print(f"         ‚úÖ Views: {views_value:,} Âõû")
                    else:
                        video_result["metrics"]["views"] = {
                            "success": False,
                            "error": "Empty data array"
                        }
                        print(f"         ‚ùå Views: „Éá„Éº„Çø„ÅåÁ©∫")
                else:
                    video_result["metrics"]["views"] = {
                        "success": False,
                        "error": "No response or missing data key"
                    }
                    print(f"         ‚ùå Views: „É¨„Çπ„Éù„É≥„Çπ„Å™„Åó")
                    
            except Exception as e:
                video_result["metrics"]["views"] = {
                    "success": False,
                    "error": str(e)
                }
                print(f"         ‚ùå Views: ‰æãÂ§ñ - {e}")
            
            # Test 2: Reach for comparison (we know this works)
            print(f"      üìä ÊØîËºÉ„É°„Éà„É™„ÇØ„Çπ: reachÂèñÂæó...")
            try:
                reach_params = {
                    'metric': 'reach',
                    'access_token': page_token
                }
                
                reach_response = client.graph_api_request(f'/{video_id}/insights', params=reach_params)
                
                if reach_response and 'data' in reach_response:
                    reach_data = reach_response['data']
                    if reach_data and len(reach_data) > 0:
                        reach_value = reach_data[0].get('values', [{}])[0].get('value', 0)
                        video_result["metrics"]["reach"] = {
                            "success": True,
                            "value": reach_value
                        }
                        print(f"         ‚úÖ Reach: {reach_value:,} „É¶„Éº„Ç∂„Éº")
                    else:
                        video_result["metrics"]["reach"] = {
                            "success": False,
                            "error": "Empty data array"
                        }
                        print(f"         ‚ùå Reach: „Éá„Éº„Çø„ÅåÁ©∫")
            except Exception as e:
                video_result["metrics"]["reach"] = {
                    "success": False,
                    "error": str(e)
                }
                print(f"         ‚ùå Reach: ‰æãÂ§ñ - {e}")
            
            # Test 3: Try old video_views for comparison (expected to fail)
            print(f"      üìä Êóß„É°„Éà„É™„ÇØ„Çπ: video_viewsÂèñÂæóÔºàÂ§±Êïó‰∫àÊÉ≥Ôºâ...")
            try:
                old_params = {
                    'metric': 'video_views',
                    'access_token': page_token
                }
                
                old_response = client.graph_api_request(f'/{video_id}/insights', params=old_params)
                
                if old_response and 'data' in old_response:
                    old_data = old_response['data']
                    if old_data and len(old_data) > 0:
                        old_value = old_data[0].get('values', [{}])[0].get('value', 0)
                        video_result["metrics"]["video_views_old"] = {
                            "success": True,
                            "value": old_value
                        }
                        print(f"         ‚ö†Ô∏è Video_viewsÔºàÊóßÔºâ: {old_value:,} Âõû - ÊÑèÂ§ñ„Å´„ÇÇÂèñÂæóÊàêÂäü")
                    else:
                        video_result["metrics"]["video_views_old"] = {
                            "success": False,
                            "error": "Empty data array"
                        }
                        print(f"         ‚ùå Video_viewsÔºàÊóßÔºâ: „Éá„Éº„Çø„ÅåÁ©∫")
                else:
                    video_result["metrics"]["video_views_old"] = {
                        "success": False,
                        "error": "No response or missing data key"
                    }
                    print(f"         ‚ùå Video_viewsÔºàÊóßÔºâ: „É¨„Çπ„Éù„É≥„Çπ„Å™„ÅóÔºà‰∫àÊÉ≥ÈÄö„ÇäÔºâ")
                    
            except Exception as e:
                video_result["metrics"]["video_views_old"] = {
                    "success": False,
                    "error": str(e)
                }
                print(f"         ‚ùå Video_viewsÔºàÊóßÔºâ: ‰æãÂ§ñ - {e}")
            
            views_results.append(video_result)
            print()
        
        # Create test result
        successful_views = sum(1 for result in views_results 
                             if result.get("metrics", {}).get("views", {}).get("success"))
        successful_reach = sum(1 for result in views_results 
                             if result.get("metrics", {}).get("reach", {}).get("success"))
        
        test_result = {
            "test_name": "views_metric_validation",
            "success": successful_views > 0,
            "data": {
                "videos_tested": len(views_results),
                "successful_views": successful_views,
                "successful_reach": successful_reach,
                "video_results": views_results
            },
            "notes": f"{successful_views}‰ª∂„ÅÆVIDEOÊäïÁ®ø„Åßviews „É°„Éà„É™„ÇØ„ÇπÂèñÂæóÊàêÂäü"
        }
        
    except Exception as e:
        test_result = {
            "test_name": "views_metric_validation",
            "success": False,
            "error": str(e),
            "notes": "views „É°„Éà„É™„ÇØ„ÇπÊ§úË®º„Åß‰æãÂ§ñÁô∫Áîü"
        }
        print(f"‚ùå ‰æãÂ§ñ: {e}")
    
    results["views_test_results"] = [test_result]
    
    # Save results
    output_file = os.path.join(os.path.dirname(__file__), '03-output-data.json')
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ ÁµêÊûú‰øùÂ≠ò: {output_file}")
    
    # Summary
    if test_result.get("success"):
        successful_views = test_result["data"]["successful_views"]
        successful_reach = test_result["data"]["successful_reach"]
        total_tested = test_result["data"]["videos_tested"]
        
        print(f"\nüèÅ Ê§úË®ºÂÆå‰∫Ü - ÂÆüË°åÁµêÊûú„Çµ„Éû„É™„Éº")
        print(f"üß™ „ÉÜ„Çπ„Éà„Åó„ÅüVIDEOÊäïÁ®ø: {total_tested}‰ª∂")
        print(f"‚úÖ Views „É°„Éà„É™„ÇØ„ÇπÂèñÂæóÊàêÂäü: {successful_views}‰ª∂")
        print(f"‚úÖ Reach „É°„Éà„É™„ÇØ„ÇπÂèñÂæóÊàêÂäü: {successful_reach}‰ª∂")
        
        if successful_views > 0:
            print("üéâ Êñ∞„Åó„ÅÑviews „É°„Éà„É™„ÇØ„Çπ„ÅÆÂèñÂæó„Å´ÊàêÂäü„Åó„Åæ„Åó„ÅüÔºÅ")
            print("üîç ÁµêÊûú: 2025Âπ¥4Êúà„ÅÆÁµ±‰∏Ä„É°„Éà„É™„ÇØ„Çπ„ÅåÊ≠£Â∏∏„Å´Ê©üËÉΩ„Åó„Å¶„ÅÑ„Åæ„Åô")
            print("üéØ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: ÊäïÁ®øÂàÜÊûê„Éö„Éº„Ç∏„Åßviews „Éá„Éº„Çø„ÇíÊ¥ªÁî®„Åß„Åç„Åæ„Åô")
        else:
            print("‚ö†Ô∏è Views „É°„Éà„É™„ÇØ„Çπ„ÅØÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„Åå„ÄÅReach„ÅØÊ≠£Â∏∏„Åß„Åô")
        
        return True
    else:
        print(f"\nüèÅ Ê§úË®ºÂÆå‰∫Ü - ÂÆüË°åÁµêÊûú„Çµ„Éû„É™„Éº")
        print("‚ùå Views „É°„Éà„É™„ÇØ„Çπ„ÅÆÊ§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
        print("üîß ÂØæÁ≠ñ: API„Éê„Éº„Ç∏„Éß„É≥„Åæ„Åü„ÅØ„É°„Éà„É™„ÇØ„ÇπÂêç„ÇíÂÜçÁ¢∫Ë™ç„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô")
        return False

if __name__ == "__main__":
    success = test_views_metric()
    sys.exit(0 if success else 1)